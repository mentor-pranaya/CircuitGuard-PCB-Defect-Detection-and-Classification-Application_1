# -*- coding: utf-8 -*-
"""ROI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fUqKbD3siP2uqOsnGUKIlRCVZeEtAXuB
"""

import os
import cv2
import numpy as np
import glob
from google.colab import drive

PROCESSED_ROOT = '/content/processed_masks'
ROI_OUTPUT_ROOT = '/content/final_defect_rois'
os.makedirs(ROI_OUTPUT_ROOT, exist_ok=True)

MIN_DEFECT_AREA = 150

def extract_defect_rois(aligned_img, mask_img, output_dir, base_name, defect_type, min_area=150):
    """Extracts all ROI patches from one mask and saves them in the output directory."""

    kernel = np.ones((5, 5), np.uint8)

    # Clean the binary mask to remove noise
    opened = cv2.morphologyEx(mask_img, cv2.MORPH_OPEN, kernel, iterations=1)
    cleaned = cv2.morphologyEx(opened, cv2.MORPH_CLOSE, kernel, iterations=2)

    contours, _ = cv2.findContours(cleaned, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    roi_count = 0

    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area < min_area:
            continue
        x, y, w, h = cv2.boundingRect(cnt)
        roi_patch = aligned_img[y:y+h, x:x+w]

        # Save ROI patch
        roi_name = f"{base_name}_{defect_type}_{roi_count}.png"
        cv2.imwrite(os.path.join(output_dir, roi_name), roi_patch)
        roi_count += 1

    return roi_count

def run_roi_pipeline(processed_root, roi_output_root):
    """Walks through processed folders and extracts ROIs."""
    mask_files = glob.glob(os.path.join(processed_root, '**/*mask*.png'), recursive=True)

    if not mask_files:
        print('ERROR: No *_mask.png files found. Please check PROCESSED_ROOT path.')
        return

    total_rois = 0

    for mask_path in mask_files:
        try:
            base_name = os.path.basename(mask_path).replace('_mask.png', '')
            defect_type = os.path.basename(os.path.dirname(mask_path))
            aligned_path = os.path.join(os.path.dirname(mask_path), f"{base_name}_aligned.png")

            # Read images
            mask_img = cv2.imread(mask_path, 0)
            aligned_img = cv2.imread(aligned_path, 0)

            if mask_img is None or aligned_img is None:
                print(f"Skipping: Missing aligned or mask image for {mask_path}")
                continue
             # Prepare save directory
            save_dir = os.path.join(roi_output_root, defect_type)
            os.makedirs(save_dir, exist_ok=True)

            # Extract ROIs
            roi_count = extract_defect_rois(aligned_img, mask_img, save_dir, base_name, defect_type)
            total_rois += roi_count

            print(f"{defect_type}/{base_name}: {roi_count} ROIs extracted.")

        except Exception as e:
            print(f"Error on {mask_path}: {e}")

    print(f"\nâœ… Total ROIs extracted: {total_rois}")

run_roi_pipeline(PROCESSED_ROOT, ROI_OUTPUT_ROOT)